service: aqts-capture-load-test

provider:
  name: aws
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'TEST'}
  runtime: python3.8
  memorySize: 128
  timeout: 45
  logRetentionInDays: 90
  deploymentBucket:
    name: iow-cloud-applications
  stackTags:
    "wma:applicationId": "Aquarius TS Capture Load Test"
    "wma:contact": "Kenneth Kehl kkehl@contractor.usgs.gov"
    "wma:environment": ${self:provider.stage}
    "wma:taggingVersion": 0.0.1
    "wma:costCenter": TBD
    commitIdentifier: ${git:sha1}

custom:
  exportGitVariables: false
  vpc:
    securityGroupIds: ${ssm:/iow/retriever-capture/${self:provider.stage}/securityGroupIds~split}
    subnetIds: ${ssm:/iow/aws/vpc/${self:provider.stage}/subnetIds~split}

functions:
  copyS3:
    handler: src.handler.copy_s3
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  restoreDbCluster:
    handler: src.handler.restore_db_cluster
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  modifyDbCluster:
    handler: src.handler.modify_db_cluster
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}


  deleteBucket:
    handler: src.handler.delete_bucket
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  createDbInstance:
    handler: src.handler.create_db_instance
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  deleteDbInstance:
    handler: src.handler.delete_db_instance
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  deleteDbCluster:
    handler: src.handler.delete_db_cluster
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  falsifySecrets:
    handler: src.handler.falsify_secrets
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  restoreSecrets:
    handler: src.handler.restore_secrets
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  disableMainTrigger:
    handler: src.handler.disable_main_trigger
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  enableMainTrigger:
    handler: src.handler.enable_main_trigger
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  runIntegrationTests:
    handler: src.handler.run_integration_tests
    role: arn:aws:iam::#{AWS::AccountId}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}





resources:
  Resources:
    ReferenceFileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: iow-retriever-capture-reference
    # See aqts-capture-trigger, need to hook this bucket up to sqs queue ...
    LoadTestBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: iow-retriever-capture-load


stepFunctions:
  stateMachines:
    aqtsLoadTest:
      loggingConfig:
        level: ALL
        includeExecutionData: true
        destinations:
          - arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:step-functions-test:*
      name: aqts-capture-load-test-${self:provider.stage}
      definition:
        Comment: "AQTS Load Test"
        StartAt: RestoreDbCluster
        States:
          RestoreDbCluster:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreDbCluster, Arn]
            Next: ModifyDbCluster
          ModifyDbCluster:
            Type: Task
            Resource:
              Fn::GetAtt: [modifyDbCluster, Arn]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 600
                MaxAttempts: 10
                BackoffRate: 1
            Next: CreateDbInstance
          CreateDbInstance:
            Type: Task
            Resource:
              Fn::GetAtt: [createDbInstance, Arn]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 600
                MaxAttempts: 10
                BackoffRate: 1
            End: true
#            Next: DisableMainTrigger
#          DisableMainTrigger:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [ disableMainTrigger, Arn]
#            Next: FalsifySecrets
#          FalsifySecrets:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [ falsifySecrets, Arn ]
#            Next: CopyS3
#          CopyS3:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [copyS3, Arn]
#            Next: WaitForProcessing
#          WaitForProcessing:
#            Type: Wait
#            Seconds: 60
#            Next: RunIntegrationTests
#          RunIntegrationTests:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [ runIntegrationTests, Arn ]
#            Next: WaitForTestResults
#          WaitForTestResults:
#            Type: Wait
#            Seconds: 60
#            Next: DeleteBucket
#          DeleteBucket:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [ deleteBucket, Arn ]
#              Next: RestoreSecrets
#          RestoreSecrets:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [ restoreSecrets, Arn ]
#              Next: EnableMainTrigger
#          EnableMainTrigger:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [ enableMainTrigger, Arn ]
#              Next: DeleteDbInstance
#          DeleteDbInstance:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [ deleteDbInstance, Arn ]
#            Retry:
#              - ErrorEquals:
#                  - States.ALL
#                IntervalSeconds: 900
#                MaxAttempts: 8
#                BackoffRate: 1
#            Next: DeleteDbCluster
#          DeleteDbCluster:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [deleteDbCluster, Arn]
#            End: true

plugins:
  - serverless-plugin-git-variables
  - serverless-step-functions
  - serverless-python-requirements
  - serverless-pseudo-parameters

package:
  exclude:
    - node_modules/**
    - Dockerfile
    - .dockerignore
    - Jenkinsfile
    - package.json
    - package-lock.json
