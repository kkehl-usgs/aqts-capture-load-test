service: aqts-capture-load-test

provider:
  name: aws
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'TEST'}
  runtime: python3.8
  memorySize: 128
  timeout: 45
  logRetentionInDays: 90
  deploymentBucket:
    name: iow-cloud-applications
  stackTags:
    "wma:applicationId": "Aquarius TS Capture Load Test"
    "wma:contact": "Kenneth Kehl kkehl@contractor.usgs.gov"
    "wma:environment": ${self:provider.stage}
    "wma:taggingVersion": 0.0.1
    "wma:costCenter": TBD
    commitIdentifier: ${git:sha1}

custom:
  exportGitVariables: false
  accountNumber: ${ssm:/iow/aws/accountNumber}
  vpc:
    securityGroupIds: ${ssm:/iow/retriever-capture/${self:provider.stage}/securityGroupIds~split}
    subnetIds: ${ssm:/iow/aws/vpc/${self:provider.stage}/subnetIds~split}

functions:
  copyS3:
    handler: src.handler.copy_s3
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  copyS3Temp:
    handler: src.handler.copy_s3_temp
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  restoreDbCluster:
    handler: src.handler.restore_db_cluster
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  modifyDbCluster:
    handler: src.handler.modify_db_cluster
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  createDbInstance:
    handler: src.handler.create_db_instance
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  deleteDbInstance:
    handler: src.handler.delete_db_instance
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

  deleteDbCluster:
    handler: src.handler.delete_db_cluster
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      MAX_RETRIES: 6
    vpc: ${self:custom.vpc}

resources:
  Resources:
    ReferenceFileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: iow-retriever-capture-reference
    # See aqts-capture-trigger, need to hook this bucket up to sqs queue ...
    LoadTestBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: iow-retriever-capture-load

stepFunctions:
  stateMachines:
    aqtsLoadTest:
      loggingConfig:
        level: ALL
        includeExecutionData: true
        destinations:
          - arn:aws:logs:${self:provider.region}:${self:custom.accountNumber}:log-group:step-functions-test:*
      role: arn:aws:iam::${self:custom.accountNumber}:role/step-functions-service-access
      name: aqts-capture-load-test-${self:provider.stage}
      definition:
        Comment: "AQTS Load Test"
        StartAt: CopyS3
        States:
          CopyS3:
            Type: Task
            Resource:
              Fn::GetAtt: [copyS3, Arn]
            Next: RestoreDbCluster
          RestoreDbCluster:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreDbCluster, Arn]
            Next: ModifyDbCluster
          ModifyDbCluster:
            Type: Task
            Resource:
              Fn::GetAtt: [modifyDbCluster, Arn]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 300
                MaxAttempts: 20
                BackoffRate: 1
            Next: CreateDbInstance
          CreateDbInstance:
            Type: Task
            Resource:
              Fn::GetAtt: [createDbInstance, Arn]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 300
                MaxAttempts: 20
                BackoffRate: 1
            End: true

#            Next: DeleteDbInstance
#          DisableTriggerReal:
#            Type: Task
#            Resource:
#            Next:
#          SetSecretsToFake:
#            Type: Task
#            Resource:
#            Next:
#          EnableTriggerFake:
#            Type: Task
#            Resource:
#            Next:
#          WaitForProcessing:
#            Type: Wait
#            Seconds: 3600
#            Next:
#          RunIntegrationTests:
#            Type: Task
#            Resource:
#            Next:
#          DisableTriggerFake:
#          SetSecretsToReal:
#          EnableTriggerReal:

#          DeleteDbInstance:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [ deleteDbInstance, Arn ]
#            Retry:
#              - ErrorEquals:
#                  - States.ALL
#                IntervalSeconds: 240
#                MaxAttempts: 4
#                BackoffRate: 2
#            Next: DeleteDbCluster
#          DeleteDbCluster:
#            Type: Task
#            Resource:
#              Fn::GetAtt: [deleteDbCluster, Arn]
#            End: true

plugins:
  - serverless-plugin-git-variables
  - serverless-step-functions
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - Dockerfile
    - .dockerignore
    - Jenkinsfile
    - package.json
    - package-lock.json
